"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _mapValues = require("../shared/mapValues");

var _mapValues2 = _interopRequireDefault(_mapValues);

var _QueryString = require("../shared/QueryString");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var emptyObject = {};
var defaultGetQueries = function defaultGetQueries() {
  return emptyObject;
};
var socketServerURL = "http://localhost:1415";

function createContainer(Component) {
  var getQueries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetQueries;

  var PhenomicRouteContainer = function (_React$Component) {
    (0, _inherits3.default)(PhenomicRouteContainer, _React$Component);

    function PhenomicRouteContainer(props, context) {
      (0, _classCallCheck3.default)(this, PhenomicRouteContainer);

      var _this = (0, _possibleConstructorReturn3.default)(this, (PhenomicRouteContainer.__proto__ || (0, _getPrototypeOf2.default)(PhenomicRouteContainer)).call(this, props, context));

      _initialiseProps.call(_this);

      _this.computeQueries(props);
      // if we're on the server, let's just run the query
      if (_this.context.__prerendering) {
        _this.query();
      }
      return _this;
    }

    (0, _createClass3.default)(PhenomicRouteContainer, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        if (!this.context.__prerendering) {
          this.query();
        }
        this.unsubscribe = this.context.phenomic.subscribe(function () {
          return _this2.update();
        });
        if (process.env.NODE_ENV !== "production") {
          require("socket.io-client")(socketServerURL).on("change", this.forceQuery);
        }
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(props) {
        var _this3 = this;

        this.computeQueries(props);
        this.schedule(function () {
          return _this3.query();
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (typeof this.unsubscribe === "function") {
          this.unsubscribe();
        }
        this.unsubscribe = null;

        if (process.env.NODE_ENV !== "production") {
          require("socket.io-client")(socketServerURL).removeListener("change", this.forceQuery);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this4 = this;

        var store = this.context.phenomic;
        var values = (0, _keys2.default)(this.queries).map(function (key) {
          return _this4.queries[key];
        });
        var isLoading = values.some(function (item) {
          return !store.get(item).node;
        });
        var hasErrored = values.some(function (item) {
          return store.get(item).status === "error";
        });
        var props = (0, _mapValues2.default)(this.queries, function (value, key) {
          return store.get(_this4.queries[key]);
        });
        if (hasErrored) {
          console.error("An item is in error state", values.find(function (item) {
            return store.get(item).status === "error";
          }));
          return React.createElement(Component, (0, _extends3.default)({}, this.props, { hasError: true }, props));
        }
        return React.createElement(Component, (0, _extends3.default)({}, this.props, { isLoading: isLoading }, props));
      }
    }]);
    return PhenomicRouteContainer;
  }(React.Component);

  PhenomicRouteContainer.getQueries = getQueries;
  PhenomicRouteContainer.contextTypes = {
    query: _propTypes2.default.func,
    phenomic: _propTypes2.default.object,
    __prerendering: _propTypes2.default.bool
  };

  var _initialiseProps = function _initialiseProps() {
    var _this5 = this;

    this.forceQuery = function () {
      _this5.query(true);
    };

    this.update = function () {
      _this5.schedule(function () {
        return _this5.forceUpdate();
      });
    };

    this.schedule = function (func) {
      requestAnimationFrame(function () {
        if (typeof _this5.unsubscribe === "function") {
          func();
        }
      });
    };

    this.computeQueries = function (props) {
      _this5.queries = (0, _mapValues2.default)(getQueries(props), _QueryString.encode);
    };

    this.query = function () {
      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      var store = _this5.context.phenomic;
      var values = (0, _keys2.default)(_this5.queries).map(function (key) {
        return _this5.queries[key];
      });
      if (force) {
        _this5.context.query(values);
      } else {
        _this5.context.query(values.filter(function (item) {
          return store.get(item).status !== "idle";
        }));
      }
    };
  };

  return PhenomicRouteContainer;
}

exports.default = createContainer;