"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require("babel-runtime/helpers/defineProperty");

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _extends3 = require("babel-runtime/helpers/extends");

var _extends4 = _interopRequireDefault(_extends3);

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

exports.default = function () {
  return {
    name: "@phenomic/plugin-bundler-webpack",
    addDevServerMiddlewares: function addDevServerMiddlewares(config) {
      debug("get middlewares");
      var compiler = (0, _webpack2.default)(getWebpackConfig(config));
      var assets = {};
      compiler.plugin("done", function (stats) {
        assets = {};
        var namedChunks = stats.compilation.namedChunks;
        (0, _keys2.default)(namedChunks).forEach(function (chunkName) {
          var files = namedChunks[chunkName].files.filter(function (file) {
            return !file.endsWith(".hot-update.js");
          });
          if (files.length) {
            assets = (0, _extends4.default)({}, assets, (0, _defineProperty3.default)({}, chunkName, files.shift()));
          }
        });
      });
      return [function (req, res, next) {
        res.locals.assets = assets;
        next();
      }, (0, _webpackDevMiddleware2.default)(compiler, {
        stats: { chunkModules: false, assets: false
          // @todo add this and output ourself a nice message for build status
          // noInfo: true,
          // quiet: true,
        } }), (0, _webpackHotMiddleware2.default)(compiler, {
        reload: true
        // skip hot middleware logs if !verbose
        // log: config.verbose ? undefined : () => {},
      })];
    },
    buildForPrerendering: function buildForPrerendering(config) {
      debug("build for prerendering");
      var webpackConfig = getWebpackConfig(config);
      var specialConfig = (0, _extends4.default)({}, webpackConfig, {
        // only keep the entry we are going to use
        entry: (0, _defineProperty3.default)({}, config.bundleName, webpackConfig.entry[config.bundleName]),
        // adjust some config details to be node focused
        target: "node",
        // externals for package/relative name
        externals: [].concat((0, _toConsumableArray3.default)(webpackConfig.externals || defaultExternals)),
        output: {
          publicPath: "/", // @todo make this dynamic
          path: cacheDir,
          filename: "[name].js",
          library: "app",
          libraryTarget: "commonjs2"
        },
        plugins: [].concat((0, _toConsumableArray3.default)(webpackConfig.plugins ? webpackConfig.plugins.filter(function (plugin) {
          return !(plugin instanceof UglifyJsPlugin);
        }) : []), [
        // sourcemaps
        new _webpack.BannerPlugin({
          banner: requireSourceMapSupport,
          raw: true,
          entryOnly: false
        })]),
        // sourcemaps
        devtool: "#source-map"
      });
      return (0, _webpackPromise2.default)(specialConfig).then(function () {
        return require(_path2.default.join(cacheDir, config.bundleName)).default;
      });
    },
    build: function build(config) {
      debug("build");
      return (0, _webpackPromise2.default)(getWebpackConfig(config)).then(function (stats) {
        return stats.toJson().assetsByChunkName;
      });
    }
  };
};

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _findCacheDir = require("find-cache-dir");

var _findCacheDir2 = _interopRequireDefault(_findCacheDir);

var _webpack = require("webpack");

var _webpack2 = _interopRequireDefault(_webpack);

var _webpackDevMiddleware = require("webpack-dev-middleware");

var _webpackDevMiddleware2 = _interopRequireDefault(_webpackDevMiddleware);

var _webpackHotMiddleware = require("webpack-hot-middleware");

var _webpackHotMiddleware2 = _interopRequireDefault(_webpackHotMiddleware);

var _webpackPromise = require("./webpack-promise.js");

var _webpackPromise2 = _interopRequireDefault(_webpackPromise);

var _validate = require("./validate.js");

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import url from "url"

// import pkg from "@phenomic/core/package.json"
var debug = require("debug")("phenomic:plugin:webpack");
// import webpack, { BannerPlugin, optimize, DefinePlugin } from "webpack"
var UglifyJsPlugin = _webpack.optimize.UglifyJsPlugin;

var cacheDir = (0, _findCacheDir2.default)({ name: "phenomic/webpack", create: true });
var requireSourceMapSupport = "require('" + require.resolve("source-map-support/register")
// windows support
.replace(/\\/g, "/") + "');";

var wrap = _stringify2.default;

var defaultExternals = [
// we could consider node_modules as externals deps
// and so use something like
// /^[A-Za-z0-9-_]/
// to not bundle all deps in the static build (for perf)
// the problem is that if people rely on node_modules for stuff
// like css, this breaks their build.
//
// @todo find a better way than a whitelist

/^emotion(\/.*)?/, /^glamor(\/.*)?/, /^aphrodite(\/.*)?/, /^react-native-web(\/.*)?/, /^react-helmet(\/.*)?/];

var getWebpackConfig = function getWebpackConfig(config) {
  var webpackConfig = void 0;
  var userWebpackConfigPath = _path2.default.join(config.path, "webpack.config.js");
  if (_fs2.default.existsSync(userWebpackConfigPath)) {
    webpackConfig = require(userWebpackConfigPath)(config);
    debug("webpack.config.js used");
  } else {
    debug("webpack.config.js not found");
    var userWebpackConfigBabelPath = _path2.default.join(config.path, "webpack.config.babel.js");
    if (_fs2.default.existsSync(userWebpackConfigBabelPath)) {
      webpackConfig = require(userWebpackConfigBabelPath)(config);
      debug("webpack.config.babel.js used");
    } else {
      debug("webpack.config.babel.js not found");
      webpackConfig = require(_path2.default.join(__dirname, "webpack.config.js"))(config);
      debug("default webpack config used");
    }
  }
  (0, _validate2.default)(webpackConfig, config);
  debug(webpackConfig);
  return (0, _extends4.default)({}, webpackConfig, {
    plugins: [].concat((0, _toConsumableArray3.default)(webpackConfig.plugins || []), [new _webpack2.default.DefinePlugin({
      "process.env.NODE_ENV": wrap(process.env.NODE_ENV)
    })])
  });
};