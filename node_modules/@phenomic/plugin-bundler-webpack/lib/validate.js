"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

var _multili = require("multili");

var _multili2 = _interopRequireDefault(_multili);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var typeOf = function typeOf(value) {
  var type = typeof value === "undefined" ? "undefined" : (0, _typeof3.default)(value);
  if (Array.isArray(value)) {
    return "array";
  }
  if (value === null) {
    return "null";
  }
  return type;
};

exports.default = function (webpackConfig, config) {
  if (!webpackConfig.entry || !webpackConfig.entry[config.bundleName]) {
    var error = "@phenomic/plugin-bundler-webpack expects an entry named '" + config.bundleName + "' in your webpack config.\n";
    // be careful about the indentation here
    var adviceCode = "[\n            process.env.PHENOMIC_ENV !== \"static\" && require.resolve(\"webpack-hot-middleware/client\"),\n            process.env.PHENOMIC_ENV !== \"static\" && require.resolve(\"react-hot-loader/patch\"),\n            \"./App.js\"\n          ].filter(item => item)";
    var type = typeOf(webpackConfig.entry);
    if (type === "object") {
      // $FlowFixMe here we know we have an object, see typeOf function
      error += "Your current entries keys are '" + (0, _keys2.default)(webpackConfig.entry) + "'.\n";
    } else {
      error += "Your current entry is of type '" + type + "'.\n";
    }
    if (type === "string" || type === "array") {
      adviceCode = (0, _stringify2.default)(webpackConfig.entry);
    }
    error += (0, _multili2.default)("\n      Please use an object like this:\n\n        entry: {\n          \"phenomic.main\": " + adviceCode + ",\n        }\n\n    ");
    throw new Error(error);
  }
};