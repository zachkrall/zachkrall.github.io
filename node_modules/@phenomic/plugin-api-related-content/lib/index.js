"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.default = function () {
  return {
    name: "@phenomic/plugin-api-related-content",
    define: function define(serverAPI) {
      // $FlowFixMe flow is lost with async function for express
      serverAPI.get("/related/:path/limit-:limit/*.json", function () {
        var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(req, res) {
          var limit, post, lists, flattenedList, listWithoutCurrentPost;
          return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  debug(req.url, (0, _stringify2.default)(req.params));
                  _context.prev = 1;
                  limit = parseInt(res.params.limit);
                  _context.next = 5;
                  return req.db.get([req.params.path], req.params[0]);

                case 5:
                  post = _context.sent;
                  _context.next = 8;
                  return _promise2.default.all([].concat((0, _toConsumableArray3.default)(post.value.tags.map(function (tag) {
                    return req.db.getList(req.params.path, {
                      limit: limit + 1
                    }, "tags", tag);
                  })), [req.db.getList(req.params.path, { limit: limit + 1 })]));

                case 8:
                  lists = _context.sent;
                  flattenedList = (0, _lodash2.default)(lists);
                  listWithoutCurrentPost = flattenedList.filter(function (item) {
                    return item.id !== post.value.id;
                  });

                  res.json(listWithoutCurrentPost);
                  _context.next = 17;
                  break;

                case 14:
                  _context.prev = 14;
                  _context.t0 = _context["catch"](1);

                  res.status(404).end();

                case 17:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this, [[1, 14]]);
        }));

        return function (_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());
    }
  };
};

var _lodash = require("lodash.flatten");

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = require("debug")("phenomic:plugin:api-related-content");