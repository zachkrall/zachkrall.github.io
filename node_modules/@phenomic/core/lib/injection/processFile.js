"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var processFile = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(_ref3) {
    var config = _ref3.config,
        db = _ref3.db,
        file = _ref3.file,
        transformers = _ref3.transformers,
        collectors = _ref3.collectors;
    var contents, transformPlugin, plugin, parsed;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            debug("processing " + file.name);
            _context.next = 3;
            return (0, _readFile2.default)(file.fullpath);

          case 3:
            contents = _context.sent;
            transformPlugin = transformers.find(function (plugin) {
              return Array.isArray(plugin.supportedFileTypes) && plugin.supportedFileTypes.indexOf(_path2.default.extname(file.name).slice(1)) !== -1;
            });
            plugin = transformPlugin || defaultTransformPlugin;

            if (!(typeof plugin.transform !== "function")) {
              _context.next = 8;
              break;
            }

            throw new Error("transform plugin must implement a transform() method");

          case 8:
            _context.next = 10;
            return plugin.transform({
              config: config,
              file: file,
              contents: contents
            });

          case 10:
            parsed = _context.sent;


            debug(file.name + " processed");
            // Don't show drafts in production

            if (!(process.env.NODE_ENV === "production" && parsed.data.draft)) {
              _context.next = 15;
              break;
            }

            debug(file.name + " skipped because it's a draft");
            return _context.abrupt("return");

          case 15:
            _context.next = 17;
            return collectors.forEach(function (plugin) {
              typeof plugin.collect === "function" && plugin.collect(db, file.name, parsed);
            });

          case 17:
            return _context.abrupt("return", _context.sent);

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function processFile(_x) {
    return _ref2.apply(this, arguments);
  };
}();

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _readFile = require("../utils/readFile");

var _readFile2 = _interopRequireDefault(_readFile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = require("debug")("phenomic:core:injection");

var defaultTransformPlugin = {
  name: "@phenomic/plugin-default-transform",
  supportedFileTypes: [],
  transform: function transform(_ref) {
    var contents = _ref.contents;

    return {
      partial: null,
      data: {
        body: contents
      }
    };
  }
};

exports.default = processFile;