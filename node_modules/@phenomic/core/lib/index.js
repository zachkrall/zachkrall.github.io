"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _cosmiconfig = require("cosmiconfig");

var _cosmiconfig2 = _interopRequireDefault(_cosmiconfig);

var _defaultConfig = require("./defaultConfig.js");

var _defaultConfig2 = _interopRequireDefault(_defaultConfig);

var _flattenConfiguration = require("./configuration/flattenConfiguration.js");

var _flattenConfiguration2 = _interopRequireDefault(_flattenConfiguration);

var _start2 = require("./commands/start.js");

var _start3 = _interopRequireDefault(_start2);

var _build2 = require("./commands/build.js");

var _build3 = _interopRequireDefault(_build2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var shittyCatch = function shittyCatch(error) {
  setTimeout(function () {
    throw error;
  }, 1);
};

function normalizeConfiguration() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var configExplorer = (0, _cosmiconfig2.default)("phenomic", { cache: false });
  return configExplorer.load(process.cwd()).then(function (result) {
    if (result === null) {
      throw new Error("No configuration file found. Please add a 'phenomic' section in package.json or " + "create a file named .phenomicrc(.json|.yaml)? or phenomic.config.js." + "\nSee https://phenomic.io/docs/usage/configuration/");
    }
    return (0, _flattenConfiguration2.default)((0, _extends3.default)({}, _defaultConfig2.default, result.config, config));
  }).catch(shittyCatch);
}

exports.default = {
  start: function start() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    normalizeConfiguration(config).then(_start3.default).catch(shittyCatch);
  },
  build: function build() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    normalizeConfiguration(config).then(_build3.default).catch(shittyCatch);
  }
};