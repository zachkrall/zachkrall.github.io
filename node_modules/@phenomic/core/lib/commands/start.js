"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var start = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(config) {
    var phenomicServer, bundlerServer, renderers, renderer, transformers, collectors, io, content, watcher;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            process.env.NODE_ENV = process.env.NODE_ENV || "development";
            process.env.BABEL_ENV = process.env.BABEL_ENV || "development";
            process.env.PHENOMIC_ENV = "development";
            debug("starting phenomic server");
            phenomicServer = (0, _api2.default)(_db2.default, config.plugins);
            bundlerServer = createDevServer(config);
            renderers = config.plugins.filter(function (p) {
              return p.getRoutes;
            });
            renderer = renderers[0];
            transformers = config.plugins.filter(function (item) {
              return typeof item.transform === "function";
            });

            if (transformers.length) {
              _context4.next = 11;
              break;
            }

            throw new Error("Phenomic expects at least a transform plugin");

          case 11:
            collectors = config.plugins.filter(function (item) {
              return typeof item.collect === "function";
            });

            if (collectors.length) {
              _context4.next = 14;
              break;
            }

            throw new Error("Phenomic expects at least a collector plugin");

          case 14:
            io = (0, _socket2.default)(1415);
            _context4.prev = 15;
            _context4.next = 18;
            return getContentPath(config);

          case 18:
            content = _context4.sent;
            watcher = (0, _watch2.default)({
              path: content,
              plugins: config.plugins
            });


            watcher.onChange(function () {
              var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(files) {
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        debug("watcher onChange event");
                        _context3.prev = 1;
                        _context3.next = 4;
                        return _db2.default.destroy();

                      case 4:
                        _context3.next = 6;
                        return _promise2.default.all(files.map(function (file) {
                          return (0, _processFile2.default)({ config: config, db: _db2.default, file: file, transformers: transformers, collectors: collectors });
                        }));

                      case 6:
                        _context3.next = 11;
                        break;

                      case 8:
                        _context3.prev = 8;
                        _context3.t0 = _context3["catch"](1);

                        setTimeout(function () {
                          throw _context3.t0;
                        }, 1);

                      case 11:
                        io.emit("change");

                      case 12:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3, this, [[1, 8]]);
              }));

              return function (_x4) {
                return _ref4.apply(this, arguments);
              };
            }());
            _context4.next = 26;
            break;

          case 23:
            _context4.prev = 23;
            _context4.t0 = _context4["catch"](15);

            _log2.default.warn("no '" + contentFolder + "' folder found. Please create and put files in this folder if you want the content to be accessible (eg: markdown or JSON files). ");

          case 26:

            bundlerServer.use("/phenomic", phenomicServer);
            // $FlowFixMe flow is lost with async function for express
            bundlerServer.get("*", function (req, res) {
              res.type(".html");
              if (typeof renderer.renderDevServer !== "function") {
                res.end("Phenomic renderer requires a 'renderDevServer' function to be exposed");
              } else {
                res.end(renderer.renderDevServer({
                  config: config,
                  assets: res.locals.assets,
                  location: req.originalUrl
                }));
              }
            });
            bundlerServer.listen(config.port).on("error", function (err) {
              if (err.errno === "EADDRINUSE") {
                var existingProcess = (0, _getProcessForPort2.default)(err.port);
                (0, _log2.default)(_chalk2.default.yellow("Something is already running on port " + err.port + ". " + (existingProcess ? "Probably:\n" + existingProcess + "\n" : "")));
              } else {
                (0, _log2.default)(err);
              }
              process.exit(1);
            });
            console.log("\u2728 Open http://localhost:" + config.port);

          case 30:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this, [[15, 23]]);
  }));

  return function start(_x3) {
    return _ref3.apply(this, arguments);
  };
}();

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _express = require("express");

var _express2 = _interopRequireDefault(_express);

var _socket = require("socket.io");

var _socket2 = _interopRequireDefault(_socket);

var _getProcessForPort = require("react-dev-utils/getProcessForPort");

var _getProcessForPort2 = _interopRequireDefault(_getProcessForPort);

var _chalk = require("chalk");

var _chalk2 = _interopRequireDefault(_chalk);

var _watch = require("../watch");

var _watch2 = _interopRequireDefault(_watch);

var _processFile = require("../injection/processFile");

var _processFile2 = _interopRequireDefault(_processFile);

var _db = require("../db");

var _db2 = _interopRequireDefault(_db);

var _api = require("../api");

var _api2 = _interopRequireDefault(_api);

var _log = require("../utils/log");

var _log2 = _interopRequireDefault(_log);

var _getPath = require("../utils/getPath");

var _getPath2 = _interopRequireDefault(_getPath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = require("debug")("phenomic:core:commands:start");

var contentFolder = "content";
var getContentPath = function getContentPath(config) {
  return (0, _getPath2.default)(_path2.default.join(config.path, contentFolder));
};

function createDevServer(config) {
  var _this = this;

  debug("creating dev server");
  var server = (0, _express2.default)();
  config.plugins.forEach(function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(plugin) {
      var middlewares;
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (plugin.addDevServerMiddlewares) {
                middlewares = plugin.addDevServerMiddlewares(config);

                middlewares.forEach(function () {
                  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(m) {
                    var resolved;
                    return _regenerator2.default.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            if (!(m.then && (0, _typeof3.default)(m.then))) {
                              _context.next = 7;
                              break;
                            }

                            _context.next = 3;
                            return m;

                          case 3:
                            resolved = _context.sent;

                            if (resolved) server.use(resolved);
                            _context.next = 8;
                            break;

                          case 7:
                            server.use(m);

                          case 8:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee, _this);
                  }));

                  return function (_x2) {
                    return _ref2.apply(this, arguments);
                  };
                }());
              }

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, _this);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
  return server;
}

exports.default = start;