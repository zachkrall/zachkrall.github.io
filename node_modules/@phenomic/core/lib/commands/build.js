"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var getContent = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(db, config) {
    var transformers, collectors, contentPath, files;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            debug("getting content");
            transformers = config.plugins.filter(function (item) {
              return typeof item.transform === "function";
            });

            if (transformers.length) {
              _context.next = 4;
              break;
            }

            throw Error("Phenomic expects at least a transform plugin");

          case 4:
            collectors = config.plugins.filter(function (item) {
              return typeof item.collect === "function";
            });

            if (collectors.length) {
              _context.next = 7;
              break;
            }

            throw Error("Phenomic expects at least a collector plugin");

          case 7:
            _context.prev = 7;
            _context.next = 10;
            return getContentPath(config);

          case 10:
            contentPath = _context.sent;
            files = (0, _watch.oneShot)({
              path: contentPath,
              plugins: config.plugins
            });
            _context.next = 14;
            return db.destroy();

          case 14:
            _context.next = 16;
            return _promise2.default.all(files.map(function (file) {
              return (0, _processFile2.default)({
                config: config,
                db: db,
                file: file,
                transformers: transformers,
                collectors: collectors
              });
            }));

          case 16:
            _context.next = 21;
            break;

          case 18:
            _context.prev = 18;
            _context.t0 = _context["catch"](7);

            _log2.default.warn("no '" + contentFolder + "' folder found. Please create and put files in this folder if you want the content to be accessible (eg: markdown or JSON files). ");

          case 21:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[7, 18]]);
  }));

  return function getContent(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var prerenderFileAndDependencies = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(_ref3) {
    var config = _ref3.config,
        renderer = _ref3.renderer,
        app = _ref3.app,
        assets = _ref3.assets,
        phenomicFetch = _ref3.phenomicFetch,
        location = _ref3.location;
    var files;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            debug("'" + location + "': prepend file and deps for ");

            if (!(!renderer || !renderer.renderStatic)) {
              _context2.next = 3;
              break;
            }

            throw new Error("a renderer is required (plugin implementing 'renderStatic')");

          case 3:
            _context2.next = 5;
            return renderer.renderStatic({
              config: config,
              app: app,
              assets: assets,
              phenomicFetch: phenomicFetch,
              location: location
            });

          case 5:
            files = _context2.sent;

            debug("'" + location + "': files & deps collected", files);
            return _context2.abrupt("return", _promise2.default.all(files.map(function (file) {
              return (0, _writeFile2.default)(_path2.default.join(config.outdir, decodeURIComponent(file.path)), file.contents);
            })));

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function prerenderFileAndDependencies(_x3) {
    return _ref2.apply(this, arguments);
  };
}();

var build = function () {
  var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(config) {
    var phenomicServer, port, runningServer, bundlers, bundler, assets, app, phenomicFetch, renderers, renderer, urls;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            console.log("‚ö°Ô∏è Hey! Let's get on with it");
            debug("cleaning dist");
            _rimraf2.default.sync("dist");

            process.env.NODE_ENV = process.env.NODE_ENV || "production";
            process.env.BABEL_ENV = process.env.BABEL_ENV || "production";
            process.env.PHENOMIC_ENV = "static";
            debug("building");
            phenomicServer = (0, _api2.default)(_db2.default, config.plugins);
            _context3.next = 10;
            return (0, _getPort2.default)();

          case 10:
            port = _context3.sent;
            runningServer = phenomicServer.listen(port);

            debug("server ready");
            _context3.prev = 13;
            bundlers = config.plugins.filter(function (p) {
              return p.buildForPrerendering;
            });
            bundler = bundlers[0]; // Build webpack

            _context3.next = 18;
            return _promise2.default.all(config.plugins.filter(function (plugin) {
              return plugin.beforeBuild;
            }).map(function (plugin) {
              return plugin.beforeBuild(config);
            }));

          case 18:
            _context3.next = 20;
            return bundler.build(config);

          case 20:
            assets = _context3.sent;

            debug("assets", assets);
            console.log("üì¶ Webpack client build done " + (Date.now() - lastStamp) + "ms");
            lastStamp = Date.now();
            _context3.next = 26;
            return bundler.buildForPrerendering(config);

          case 26:
            app = _context3.sent;

            debug("app", app);
            console.log("üì¶ Webpack static build done " + (Date.now() - lastStamp) + "ms");
            lastStamp = Date.now(); // Retreive content
            _context3.next = 32;
            return getContent(_db2.default, config);

          case 32:
            console.log("üìù Content processed " + (Date.now() - lastStamp) + "ms");
            lastStamp = Date.now();
            phenomicFetch = createFetchFunction(port);
            renderers = config.plugins.filter(function (p) {
              return p.getRoutes;
            });
            renderer = renderers[0];

            if (!(!renderer || !renderer.getRoutes)) {
              _context3.next = 39;
              break;
            }

            throw new Error("a renderer is required (plugin implementing getRoutes)");

          case 39:
            _context3.next = 41;
            return (0, _resolve2.default)(renderer.getRoutes(app), phenomicFetch);

          case 41:
            urls = _context3.sent;

            debug("urls have been resolved");
            debug(urls);
            if (urls.length === 0) {
              console.log(_logSymbols2.default.warning + " No URLs resolved. You should probably double-check your routes. If you are using a single '*' route, you need to add an '/' to get a least a static entry point.");
            }
            _context3.next = 47;
            return (0, _pMap2.default)(urls, function (location) {
              return prerenderFileAndDependencies({
                config: config,
                renderer: renderer,
                app: app,
                assets: assets,
                phenomicFetch: phenomicFetch,
                location: location
              });
            }, { concurrency: 50 });

          case 47:
            console.log("üìÉ Pre-rendering finished " + (Date.now() - lastStamp) + "ms");
            lastStamp = Date.now();
            runningServer.close();
            debug("server closed");
            _context3.next = 58;
            break;

          case 53:
            _context3.prev = 53;
            _context3.t0 = _context3["catch"](13);

            runningServer.close();
            debug("server closed due to error");
            throw _context3.t0;

          case 58:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this, [[13, 53]]);
  }));

  return function build(_x4) {
    return _ref4.apply(this, arguments);
  };
}();

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _logSymbols = require("log-symbols");

var _logSymbols2 = _interopRequireDefault(_logSymbols);

require("isomorphic-fetch");

var _simpleJsonFetch = require("simple-json-fetch");

var _simpleJsonFetch2 = _interopRequireDefault(_simpleJsonFetch);

var _getPort = require("get-port");

var _getPort2 = _interopRequireDefault(_getPort);

var _url = require("@phenomic/api-client/lib/url");

var _url2 = _interopRequireDefault(_url);

var _rimraf = require("rimraf");

var _rimraf2 = _interopRequireDefault(_rimraf);

var _pMap = require("p-map");

var _pMap2 = _interopRequireDefault(_pMap);

var _watch = require("../watch");

var _processFile = require("../injection/processFile");

var _processFile2 = _interopRequireDefault(_processFile);

var _api = require("../api");

var _api2 = _interopRequireDefault(_api);

var _writeFile = require("../utils/writeFile");

var _writeFile2 = _interopRequireDefault(_writeFile);

var _resolve = require("../prerender/resolve");

var _resolve2 = _interopRequireDefault(_resolve);

var _db = require("../db");

var _db2 = _interopRequireDefault(_db);

var _log = require("../utils/log");

var _log2 = _interopRequireDefault(_log);

var _getPath = require("../utils/getPath");

var _getPath2 = _interopRequireDefault(_getPath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = require("debug")("phenomic:core:commands:build");

var contentFolder = "content";
var getContentPath = function getContentPath(config) {
  return (0, _getPath2.default)(_path2.default.join(config.path, contentFolder));
};

var lastStamp = Date.now();

function createFetchFunction(port) {
  debug("creating fetch function");
  return function (config) {
    return (0, _simpleJsonFetch2.default)((0, _url2.default)((0, _extends3.default)({}, config, {
      root: "http://localhost:" + port
    }))).then(function (res) {
      return res.json;
    });
  };
}

exports.default = function (options) {
  return build(options);
};