"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flattenPresets = undefined;

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = require("debug")("phenomic:core:configuration");

var normalizePlugin = function normalizePlugin(plugin) {
  if (!plugin) {
    throw new Error("phenomic: You provided an undefined plugin");
  }

  debug("plugin typeof", typeof plugin === "undefined" ? "undefined" : (0, _typeof3.default)(plugin));

  if (typeof plugin !== "function") {
    throw new Error("phenomic: You provided an plugin with type is " + (typeof plugin === "undefined" ? "undefined" : (0, _typeof3.default)(plugin)) + ". But function is expected instead of " + String(plugin));
  }

  // @todo send config here ?
  var pluginInstance = plugin();

  debug("plugin", pluginInstance.name);

  if (Array.isArray(pluginInstance)) {
    throw new Error("Array of plugins should be specified in 'presets' section of your configuration");
  }

  return pluginInstance;
};

var normalizeModule = function normalizeModule(module) {
  if (typeof module === "string") {
    // $FlowFixMe yeah yeah, I know what I am doing flow
    module = require(require.resolve(module));
  }

  // for es6 transpiled code
  if (module && typeof module.default === "function") {
    module = module.default;
  }

  debug("normalizeModule", module);

  return module;
};

function flattenPresets() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  debug("flattenPresets", config);
  var plugins = [].concat((0, _toConsumableArray3.default)((config.presets || []).map(normalizeModule).reduce(function (acc, preset) {
    return [].concat((0, _toConsumableArray3.default)(acc), (0, _toConsumableArray3.default)(flattenPresets(preset())));
  }, [])), (0, _toConsumableArray3.default)((config.plugins || []).map(normalizeModule).map(normalizePlugin)));
  debug("flattenPresets plugins", plugins);
  return plugins;
}

function flattenConfiguration() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  // @todo ad validation here?
  debug("flattenConfiguration", config);
  return {
    path: config.path || "",
    outdir: config.outdir || "",
    port: config.port || 8080,
    bundleName: config.bundleName || "",
    plugins: flattenPresets(config)
  };
}

exports.flattenPresets = flattenPresets;
exports.default = flattenConfiguration;